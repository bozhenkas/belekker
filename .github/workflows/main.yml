# Имя рабочего процесса, которое будет отображаться в GitHub Actions
name: Python CD

# Триггер для запуска: срабатывает при пуше в ветку 'main'
on:
  push:
    branches: [ main ]

jobs:
  # Название задачи
  deploy:
    name: Deploy Application to Server
    # Используем последнюю стабильную версию Ubuntu, как в статье
    runs-on: ubuntu-latest

    steps:
      # Шаг 1: Клонирование репозитория
      # Используем стандартное действие actions/checkout@v3, как в статье
      - name: Checkout repository
        uses: actions/checkout@v3

      # Шаг 2: Развертывание на сервере по SSH
      # Используем appleboy/ssh-action, как рекомендовано в статье
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v0.1.9
        with:
          # Данные для подключения из секретов репозитория
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          port: 17904
          
          # Скрипт, который будет выполнен на удаленном сервере
          script: |
            # Переходим в директорию с проектом
            cd ~/belekker
            
            # 1. Получаем последние изменения из ветки main
            git pull origin main
            
            # 2. Останавливаем работающие контейнеры. 
            # Это безопасная операция, которая подготавливает систему к обновлению.
            docker compose stop
            
            # 3. Принудительно удаляем ТОЛЬКО остановленные контейнеры.
            # Эта команда НЕ ТРОГАЕТ ТОМА С ДАННЫМИ (вашу базу данных).
            docker compose rm -f
            
            # 4. Запускаем проект с пересборкой образа бота.
            # Docker создаст новые контейнеры и автоматически подключит 
            # существующий том 'db_data' к новому контейнеру postgres.
            docker compose up --build -d
